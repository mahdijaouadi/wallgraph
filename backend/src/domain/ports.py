from typing import Protocol, Iterable, Optional, List, Any
from datetime import date
from backend.src.domain.models import Ticker, Earnings, Financials, News, NewsSentiment, TickerSupplierRelationship
 
class TickerRepository(Protocol):
    async def get_all_tickers(self) -> List[Ticker]: ...
    async def add_ticker(self,ticker: Ticker) -> Ticker: ...

class EarningsRepository(Protocol):
    async def check_earnings_existence(self, earnings: Earnings, ticker: Ticker) -> bool: ...
    async def add_earnings(self, earnings: Earnings) -> Earnings: ...
    async def link_earnings_to_ticker(self,ticker: Ticker, earnings: Earnings ) -> str: ...



class FinancialRepository(Protocol):
    async def check_financials_existence(self, financials: Financials, ticker: Ticker) -> bool: ...
    async def add_financials(self, financials: Financials) -> Financials: ...
    async def link_financials_to_ticker(self,ticker: Ticker, financials: Financials ) -> str: ...


class NewsRepository(Protocol):
    async def get_news(self) -> List[News]: ...
    async def check_feed_existence(self, news: News, date: str) -> bool: ...
    async def add_news(self, news:News) -> News: ...
    async def get_news_and_sentiment(self, news:News) -> List[NewsSentiment]: ...
    async def link_news_to_ticker(self, ticker: Ticker, news: News) -> str: ...


class SupplyChainRepository(Protocol):
    async def get_secfiling(self,ticker: Ticker)-> str: ...
    async def extract_date(self, sec_filing: str)-> str: ...
    async def check_filing_existence(self, ticker:  Ticker, sec_filing_date: str) -> bool: ...
    async def delete_supply_chains(self,ticker: Ticker) -> str: ...
    async def extract_ticker_supplier_relationships(self, sec_filing: str,ticker: Ticker) -> List[TickerSupplierRelationship]: ...
    async def add_supplier(self, ticker_supplier_relationship: TickerSupplierRelationship) -> TickerSupplierRelationship: ...
    async def link_supplier_to_ticker(self, ticker:Ticker, ticker_supplier_relationship: TickerSupplierRelationship) -> str: ...
    async def supplier_deduplication(self) -> str: ...

class EarningsProvider(Protocol):
    async def get_earnings(self, ticker: Ticker) -> Earnings: ...

class FinancialsProvider(Protocol):
    async def get_financials(self, ticker: Ticker) -> Financials: ...


class UnitOfWork(Protocol):
    ticker_repository: "TickerRepository"
    earnings_repository: "EarningsRepository"
    financials_repository: "FinancialRepository"
    news_repository: "NewsRepository"
    supplychain_repository: "SupplyChainRepository"

    async def __aenter__(self) -> "UnitOfWork": ...
    async def __aexit__(self, exc_type, exc, tb) -> None: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...





class Logger(Protocol):
    def debug(self, msg: str, **kv: Any) -> None: ...
    def info(self, msg: str, **kv: Any) -> None: ...
    def warning(self, msg: str, **kv: Any) -> None: ...
    def error(self, msg: str, **kv: Any) -> None: ...
    def exception(self, msg: str, **kv: Any) -> None: ...