from typing import Protocol, Iterable, Optional, List
from datetime import date
from adapters.outbound.neo4j import earnings_repository, ticker_repository
from src.domain.models import Ticker, Earnings
 
class TickerRepository(Protocol):
    async def get_all_tickers(self) -> List[Ticker]: ...
    async def add_ticker(self,ticker: Ticker) -> Ticker: ...

class EarningsRepository(Protocol):
    async def check_earnings_existence(self, earnings: Earnings, ticker: Ticker) -> bool: ...
    async def add_earnings(self, earnings: Earnings) -> Earnings: ...
    async def link_earnings_to_ticker(self,ticker: Ticker, earnings: Earnings ) -> str: ...


class EarningsProvider(Protocol):
    async def get_earnings(self, ticker: Ticker) -> Earnings: ...



class UnitOfWork(Protocol):
    ticker_repository: "TickerRepository"
    earnings_repository: "EarningsRepository"

    async def __aenter__(self) -> "UnitOfWork": ...
    async def __aexit__(self, exc_type, exc, tb) -> None: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...